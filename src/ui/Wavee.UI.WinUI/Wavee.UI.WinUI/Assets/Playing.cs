//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.0.0.1-rc+1eb78f9669
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile Playing.json
//       
//       Input file:
//           Playing.json (6151 bytes created 3:44+09:00 Jan 30 2024)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    90 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     2 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     2 |
// |--------------------------+-------|
// | ContainerVisuals         |     7 |
// | ShapeVisuals             |     3 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |    11 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     6 |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Media;

namespace AnimatedVisuals
{
    // Name:        MusicWave
    // Frame rate:  25 fps
    // Frame count: 21
    // Duration:    840.0 mS
    public sealed class Playing
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {

        // Animation duration: 0.840 seconds.
        internal const long c_durationTicks = 8400000;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res =
                new Playing_AnimatedVisual(
                    compositor
                    );
            return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 21d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 25d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(8400000);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 21d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };




        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Playing_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 8400000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorBrush _colorBrush_AlmostAntiqueWhite_FFF8E8DB;
            CompositionColorBrush _colorBrush_Black;
            CompositionEffectFactory _effectFactory;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPathGeometry _pathGeometry_0;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(result, "Progress", "_.Progress", "_", _root);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(113.254997F, 77F));
                    builder.AddCubicBezier(new Vector2(90.4710007F, 77F), new Vector2(72F, 95.4710007F), new Vector2(72F, 118.254997F));
                    builder.AddCubicBezier(new Vector2(72F, 118.254997F), new Vector2(72F, 311.278015F), new Vector2(72F, 311.278015F));
                    builder.AddCubicBezier(new Vector2(72F, 334.062012F), new Vector2(90.4710007F, 352.53299F), new Vector2(113.254997F, 352.53299F));
                    builder.AddCubicBezier(new Vector2(136.039001F, 352.53299F), new Vector2(154.509003F, 334.062012F), new Vector2(154.509003F, 311.278015F));
                    builder.AddCubicBezier(new Vector2(154.509003F, 311.278015F), new Vector2(154.509003F, 118.254997F), new Vector2(154.509003F, 118.254997F));
                    builder.AddCubicBezier(new Vector2(154.509003F, 95.4710007F), new Vector2(136.039001F, 77F), new Vector2(113.254997F, 77F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(113.254997F, 128F));
                    builder.AddCubicBezier(new Vector2(90.4710007F, 128F), new Vector2(72F, 146.470993F), new Vector2(72F, 169.255005F));
                    builder.AddCubicBezier(new Vector2(72F, 169.255005F), new Vector2(72F, 245.278F), new Vector2(72F, 245.278F));
                    builder.AddCubicBezier(new Vector2(72F, 268.062012F), new Vector2(90.4710007F, 286.53299F), new Vector2(113.254997F, 286.53299F));
                    builder.AddCubicBezier(new Vector2(136.039001F, 286.53299F), new Vector2(154.509003F, 268.062012F), new Vector2(154.509003F, 245.278F));
                    builder.AddCubicBezier(new Vector2(154.509003F, 245.278F), new Vector2(154.509003F, 169.255005F), new Vector2(154.509003F, 169.255005F));
                    builder.AddCubicBezier(new Vector2(154.509003F, 146.470993F), new Vector2(136.039001F, 128F), new Vector2(113.254997F, 128F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostAntiqueWhite_FFF8E8DB()
            {
                var accent = (Color)Application.Current.Resources["SystemAccentColor"];
                return _colorBrush_AlmostAntiqueWhite_FFF8E8DB = _c.CreateColorBrush(accent);
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // Solid layer: 1
            CompositionEffectBrush EffectBrush_0()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            // Solid layer: 2
            CompositionEffectBrush EffectBrush_1()
            {
                var effectFactory = _effectFactory;
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_2());
                result.SetSourceParameter("source", SurfaceBrush_3());
                return result;
            }

            // Solid layer: 3
            CompositionEffectBrush EffectBrush_2()
            {
                var effectFactory = _effectFactory;
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_4());
                result.SetSourceParameter("source", SurfaceBrush_5());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var result = _effectFactory = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            CompositionPath Path_0()
            {
                var result = _path_0 = new CompositionPath(Geometry_0());
                return result;
            }

            CompositionPath Path_1()
            {
                var result = _path_1 = new CompositionPath(Geometry_1());
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                var result = _pathGeometry_0 = _c.CreatePathGeometry();
                result.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_0());
                return result;
            }

            // - - - - - - Solid layer: 2
            // - Masks
            // Offset:<85.00001, -21>
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry();
                result.StartAnimation("Path", PathKeyFrameAnimation_1(), _animationController_0);
                return result;
            }

            // - - - - - Solid layer: 1
            // Masks
            // Offset:<-28, -19>
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<-28, -19>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, -28F, -19F), ColorBrush_Black()); ;
                return result;
            }

            // - - - - - Solid layer: 2
            // Masks
            // Offset:<85.00001, -21>
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<85.00001, -21>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 85.0000076F, -21F), _colorBrush_Black); ;
                return result;
            }

            // - - - - - Solid layer: 3
            // Masks
            // Offset:<193, -21>
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<193, -21>
                var geometry = _pathGeometry_0;
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 193F, -21F), _colorBrush_Black); ;
                return result;
            }

            // - Solid layer: 1
            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            // - Solid layer: 1
            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            // - Solid layer: 2
            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(VisualSurface_2());
            }

            // - Solid layer: 2
            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(VisualSurface_3());
            }

            // - Solid layer: 3
            CompositionSurfaceBrush SurfaceBrush_4()
            {
                return _c.CreateSurfaceBrush(VisualSurface_4());
            }

            // - Solid layer: 3
            CompositionSurfaceBrush SurfaceBrush_5()
            {
                return _c.CreateSurfaceBrush(VisualSurface_5());
            }

            // - - Solid layer: 1
            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(400F, 400F);
                return result;
            }

            // - - Solid layer: 1
            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(400F, 400F);
                return result;
            }

            // - - Solid layer: 2
            CompositionVisualSurface VisualSurface_2()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(400F, 400F);
                return result;
            }

            // - - Solid layer: 2
            CompositionVisualSurface VisualSurface_3()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_3();
                result.SourceSize = new Vector2(400F, 400F);
                return result;
            }

            // - - Solid layer: 3
            CompositionVisualSurface VisualSurface_4()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_4();
                result.SourceSize = new Vector2(400F, 400F);
                return result;
            }

            // - - Solid layer: 3
            CompositionVisualSurface VisualSurface_5()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_5();
                result.SourceSize = new Vector2(400F, 400F);
                return result;
            }

            // - - - Solid layer: 1
            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Transforms for 1 Scale(1,1,0), Offset(-28,-19,0)
                result.Children.InsertAtTop(SpriteVisual_1());
                return result;
            }

            // - - - Solid layer: 1
            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            // - - - Solid layer: 2
            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Transforms for 2 Scale(1,1,0), Offset(85.00001,-21,0)
                result.Children.InsertAtTop(SpriteVisual_3());
                return result;
            }

            // - - - Solid layer: 2
            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            // - - - Solid layer: 3
            ContainerVisual ContainerVisual_4()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Transforms for 3 Scale(1,1,0), Offset(193,-21,0)
                result.Children.InsertAtTop(SpriteVisual_5());
                return result;
            }

            // - - - Solid layer: 3
            ContainerVisual ContainerVisual_5()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Solid layer: 1
                children.InsertAtTop(SpriteVisual_0());
                // Solid layer: 2
                children.InsertAtTop(SpriteVisual_2());
                // Solid layer: 3
                children.InsertAtTop(SpriteVisual_4());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.476190478F, Path_1(), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.952380955F, _path_0, _cubicBezierEasingFunction_0);
                return result;
            }

            // - - - - - - - Solid layer: 2
            // - - Masks
            // -  Offset:<85.00001, -21>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, _path_1, _holdThenStepEasingFunction);
                // Frame 7.
                result.InsertKeyFrame(0.333333343F, _path_0, _cubicBezierEasingFunction_0);
                // Frame 18.
                result.InsertKeyFrame(0.857142866F, _path_1, _cubicBezierEasingFunction_0);
                return result;
            }

            // - - - - Solid layer: 1
            // Masks
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(400F, 400F);
                // Offset:<-28, -19>
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // - - - - Solid layer: 2
            // Masks
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(400F, 400F);
                // Offset:<85.00001, -21>
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // - - - - Solid layer: 3
            // Masks
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(400F, 400F);
                // Offset:<193, -21>
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // Solid layer: 1
            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(400F, 400F);
                result.Brush = EffectBrush_0();
                return result;
            }

            // - - - - Solid layer: 1
            // SolidLayerRectangle
            SpriteVisual SpriteVisual_1()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(400F, 400F);
                // Offset:<-28, -19>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, -28F, -19F, 0F, 1F);
                result.Brush = ColorBrush_AlmostAntiqueWhite_FFF8E8DB();
                return result;
            }

            // Solid layer: 2
            SpriteVisual SpriteVisual_2()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(400F, 400F);
                result.Brush = EffectBrush_1();
                return result;
            }

            // - - - - Solid layer: 2
            // SolidLayerRectangle
            SpriteVisual SpriteVisual_3()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(400F, 400F);
                // Offset:<85.00001, -21>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 85.0000076F, -21F, 0F, 1F);
                result.Brush = _colorBrush_AlmostAntiqueWhite_FFF8E8DB;
                return result;
            }

            // Solid layer: 3
            SpriteVisual SpriteVisual_4()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(400F, 400F);
                result.Brush = EffectBrush_2();
                return result;
            }

            // - - - - Solid layer: 3
            // SolidLayerRectangle
            SpriteVisual SpriteVisual_5()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(400F, 400F);
                // Offset:<193, -21>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 193F, -21F, 0F, 1F);
                result.Brush = _colorBrush_AlmostAntiqueWhite_FFF8E8DB;
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            internal Playing_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(400F, 400F);
            void IDisposable.Dispose() => _root?.Dispose();

        }
    }
}
